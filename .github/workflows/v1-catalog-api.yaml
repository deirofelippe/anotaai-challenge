name: Pipeline CI-CD do V1 Catalog API

env:
  WORKDIR: ./v1/catalog-api

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0.13-jammy
        env:
          MONGO_INITDB_ROOT_USERNAME: mongodb
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - "27018:27017"
        # options: >-
        #   --health-cmd mongodb
        #   --health-interval 10s
        #   --health-timeout 5s
        #   --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.15.x"

      - name: Install dependencies
        working-directory: ${{ env.WORKDIR }}
        run: |
          npm ci

      - name: Run test
        working-directory: ${{ env.WORKDIR }}
        run: npm run test:ci

      - name: Run Lint
        working-directory: ${{ env.WORKDIR }}
        run: npm run lint

      - name: Check dependencies for vulnerabilities
        working-directory: ${{ env.WORKDIR }}
        run: npm audit --audit-level=high

      # - name: Run Cypress tests
      #   uses: cypress-io/github-action@v2
      #   with:
      #     runTests: true

      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v1

      # - name: Run SonarQube Scan
      #   run: sonar-scanner

  cd:
    needs: [ci]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.WORKDIR }}/
          file: ${{ env.WORKDIR }}/Dockerfile
          push: true
          tags: deirofelippe/producer-anotaai-challenge:latest

      # - name: Deploy to Kubernetes
      #   uses: azure/k8s-deploy@v2
      #   with:
      #     namespace: production
      #     manifests: ./k8s-manifest.yaml

  success-notify:
    needs: [cd]
    runs-on: ubuntu-latest
    if: ${{ success() }}

    steps:
      - name: Notify Telegram If Success
        run: |
          TELEGRAM_MESSAGE='[V1 CatalogAPI] Pipeline foi finalizada'

          CURL_DATA=$(printf '{"chat_id":"%s","text":"%s"}' "${{ secrets.TELEGRAM_CHAT_ID }}" "$TELEGRAM_MESSAGE")

          curl https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            --request POST \
            --header 'Content-Type: application/json' \
            --data "$CURL_DATA"

  failure-notify:
    needs: [cd]
    runs-on: ubuntu-latest
    if: ${{ failure() }}

    steps:
      - name: Notify Telegram If Failure
        run: |
          TELEGRAM_MESSAGE='[V1 CatalogAPI] Falha na pipeline'

          CURL_DATA=$(printf '{"chat_id":"%s","text":"%s"}' "${{ secrets.TELEGRAM_CHAT_ID }}" "$TELEGRAM_MESSAGE")

          curl https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            --request POST \
            --header 'Content-Type: application/json' \
            --data "$CURL_DATA"
